app.factory('AuthService', function($q, $http, $state, cfpLoadingBar, $uibModal){
	return ({
		hostName: 'http://localhost:8000',
		// hostName: 'https://baotangvn.online',
		deleteP: deleteP,
		approvePost: approvePost,
		addSample: addSample,
		editForm: editForm,
		exportFile: exportFile,
		duplicateFile: duplicateFile,
		deleteTmpFile, deleteTmpFile,
		autoCom: autoCom,
		renderFlexdatalist: renderFlexdatalist,
		fetchFlexdatalist: fetchFlexdatalist,
		initDatePicker: initDatePicker,
		startSpinner: startSpinner,
		stopSpinner: stopSpinner,
		todoRef: todoRef,
		getRestrict: getRestrict,
		arrAuto: [
			'tenDongNghia',
			'tenTheoBaoTang',
			'tenVietNam',
			'tenPhoThong',
			'tenDiaPhuong',
			'tenTiengAnh',
			'gioi',
			'nganh', 'lop', 
			'phanLop', 
			'bo', 
			'phanBo', 
			'lienHo',
			'ho',
			'phanHo',
			'toc',
			'duoiLoai', 
			'coQuanThuMau', 'thon',
			'coQuanToChucGiamDinh',
			'coQuanXuLy',
			'boPhanLayMauDNA', 
			'trangThaiGiuMauDNA',
			'coQuanNhapVatMau',
			'giaTriSuDung',
			'tong',
			'chiGiong',
			'phanChiPhanGiong',
			'loai',
			'noiLuuTruMau',
			'viTriLayMauDNA',
			'mauDNA'
		]
	});

	function todoRef() {
		return true;
	}

	function getRestrict(sample) {
		var self = this;
		var defer = $q.defer();
		$http.get(this.hostName + "/users/me?datatype=json")
		.success(function(data, status){
			if (status == 200 && data.status == 'success') {
				defer.resolve(data);
			} else{
				defer.reject();
			}
		})
		//handle error
		.error(function(err){
			defer.reject("Lỗi trong quá trình tải dữ liệu...");
		});
		return defer.promise;
	}

	function exportFile(id, fields_form){
		var arr = document.getElementsByClassName("check-box");

		var urls = [];
		var totalFile = 0;
		var step = 0;
		var progressBar = document.getElementById('download-progress-bar');
		var progressBarContainer = document.getElementById('download-progress-bar-container');
		angular.forEach(arr, function (value) {
			if (value.checked) {
				urls.push(value.getAttribute("data-id") + id);
				totalFile++;
			}
		});

		if (totalFile){
			// step = 100 / totalFile;
			progressBar.setAttribute('aria-valuemax', totalFile);
			progressBar.style.width = '0%';
			progressBar.innerHTML = '0 / ' + totalFile;
			progressBar.setAttribute('aria-valuenow', 0);
			$(progressBarContainer).fadeIn();
			$('#circle-progress').fadeIn();
		} else{

			var modalInstance = $uibModal.open({
				templateUrl: 'views/modals/dialogs.blade.html',
				controller: "ModalInstanceCtrl",
				controllerAs: '$ctrl',
				resolve: {
					msg: function () {
						return "Xin hãy chọn file";
					},
					id: function () {
						return "";
					}
				}
			});
		}
		download(0, fields_form);

		function download(index, fields_form) {
			if (index >= totalFile){
				$(progressBarContainer).fadeOut(1000);
				$('#circle-progress').fadeOut(1000);
			}
			else {
				$('#circle-progress').circleProgress({
			    value: 0,
			    size: 80,
			    fill: {
			      gradient: ["green"]
			    },
			    animation: false
			  });
				var xhr = new XMLHttpRequest();
				// var xhr = $.ajaxSettings.xhr();
				xhr.onprogress = function (e) {
          // For downloads
          if (e.lengthComputable) {
              $('#circle-progress').circleProgress('value', e.loaded / e.total)
          }
        };
        xhr.upload.onprogress = function (e) {
          // For uploads
          if (e.lengthComputable) {
          }
        };
				if (fields_form != "") {
					xhr.open('POST', urls[index], true);
					xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
					xhr.responseType = 'arraybuffer';
					xhr.send(fields_form);
				} else{
					xhr.open('GET', urls[index], true);
					xhr.responseType = 'arraybuffer';
					xhr.send();
				}
			

				xhr.onreadystatechange = function () {
					if ((xhr.readyState == 4) && (xhr.status == 200)){
						var disposition = xhr.getResponseHeader('Content-Disposition');
						disposition = decodeURIComponent(disposition);
						var fields = disposition.split([';']);
						var fileNameIndex = -1;
						fields.map(function (element, index) {
							fields[index] = element.trim();
							if (fields[index].indexOf('filename*') >= 0){
								fileNameIndex = index;
							}
						})
						if (fileNameIndex == -1){
							for(var i = 0; i < fields.length; i++){
								if (fields[i].indexOf('filename=') >= 0){
									fileNameIndex = i;
								}
							}
						}
						var fileName = '';
						if (fileNameIndex == -1){
							fileName = 'PCSDL.' + id;
						}
						else {
							fileName = fields[fileNameIndex].substring(fields[fileNameIndex].indexOf('PCSDL'));
							fileName = decodeURIComponent(fileName);
						}
						fileName = fileName.replace(/[^a-zA-Z]+$/g, '');
						var type = xhr.getResponseHeader('Content-Type');
						// console.log(type);
						var blob = new Blob([xhr.response], {type: type});
						saveAs(blob, fileName);
						arr[index].checked = false;
						progressBar.style.width = (index + 1) / totalFile * 100 + '%';
						progressBar.innerHTML = (index + 1) + ' / ' + totalFile;
						progressBar.setAttribute('aria-valuenow', index);
						if (index >= totalFile - 1){
							setTimeout(function () {
								$(progressBarContainer).fadeOut(1000);
							}, 500)
						}
						setTimeout(function () {
							download(index + 1, fields_form);
						}, 100);
					}
				}
			}
		}
	}

	function addSample(fd, url, urlRe){
		return $.ajax({
				url: url,
				method: 'POST',
				contentType: false,
				processData: false,
				data: fd,
				success: function (data) {
					cfpLoadingBar.complete();
					stopSpinner();
					setTimeout(function () {
						var modalInstance = $uibModal.open({
							templateUrl: 'views/modals/dialogs.blade.html',
							controller: "ModalInstanceCtrl",
							controllerAs: '$ctrl',
							resolve: {
								msg: function () {
									return "Thêm mẫu vật thành công";
								},
								id: function () {
									return "";
								}
							}
						});
						$state.go(urlRe);
					}, 100)
					return data;
				},
				error: function (err) {
					cfpLoadingBar.complete();
					stopSpinner();
					cfpLoadingBar.set(0);
					setTimeout(function () {
						var modalInstance = $uibModal.open({
							templateUrl: 'views/modals/dialogs.blade.html',
							controller: "ModalInstanceCtrl",
							controllerAs: '$ctrl',
							resolve: {
								msg: function () {
									return JSON.parse(err.responseText).error;
								},
								id: function () {
									return JSON.parse(err.responseText).field;
								}
							}
						});
					}, 100)
					return err;
				}
			});
	}

	function editForm(fd, url, urlRe){
		return $.ajax({
			url: url,
			method: 'PUT',
			contentType: false,
			processData: false,
			data: fd,
			success: function (data) {
				cfpLoadingBar.complete();
				stopSpinner();
				setTimeout(function () { // Stop spinner before alerting
					var modalInstance = $uibModal.open({
						templateUrl: 'views/modals/dialogs.blade.html',
						controller: "ModalInstanceCtrl",
						controllerAs: '$ctrl',
						resolve: {
							msg: function () {
								return "Chỉnh sửa mẫu vật thành công";
							},
							id: function () {
								return "";
							}
						}
					});
					$state.go(urlRe)
				}, 100)
				return data
			},
			error: function (err) {
				cfpLoadingBar.complete();
				cfpLoadingBar.set(0);
				stopSpinner();
				// console.log(err);
				var id = JSON.parse(err.responseText).field;
				var x = document.getElementById(id);
				console.log(x);
				if (x) {
					var element = x.nextElementSibling;
					console.log(element);
					if (element) {
						element.style.borderColor = "red";
					} else{
						x.style.borderColor= "red"
					}
				}
				setTimeout(function () { // Stop spinner before alerting
					// alert(JSON.parse(err.responseText).error);
					var modalInstance = $uibModal.open({
						templateUrl: 'views/modals/dialogs.blade.html',
						controller: "ModalInstanceCtrl",
						controllerAs: '$ctrl',
						resolve: {
							msg: function () {
								return JSON.parse(err.responseText).error;
							},
							id: function () {
								return id;
							}
						}
					});
				}, 100)
				return err;
			}
		});
	}

	// Create a duplicate file
	function duplicateFile(id, form, redirect) {
		$http({
			method: 'POST',
			data: {id: id},
			url: "/content/" + form + "/duplicate"
		}).then(function success(res) {
			var sample = redirect.sample;
			var id = res.data[sample].id
			$state.go(redirect.link, {id: id});
		}, function error(err) {
			alert("Tao mau moi khong thanh cong")
		})
	}

	function deleteTmpFile(data, urlDelete) {
		$.ajax({
			url: urlDelete,
			method: 'DELETE',
			data: data,
			success: function (res) {
				// console.log(res);
				if (res.status == 'success') {
					createTags(res)
				}
			},
			error: function (err) {
				// console.log(err);
				var modalInstance = $uibModal.open({
					templateUrl: 'views/modals/dialogs.blade.html',
					controller: "ModalInstanceCtrl",
					controllerAs: '$ctrl',
					resolve: {
						msg: function () {
							return err.responseJSON.error;
						},
						id: function () {
							return "";
						}
					}
				});
			}
		})
	}

	function deleteP(id, urlDelete){
		$http({
			method: 'DELETE',
			url: urlDelete,
			headers: {'Content-Type': 'application/json'},
			data: {id: id}
		}).then(function (res) {
			var modalInstance = $uibModal.open({
				templateUrl: 'views/modals/dialogs.blade.html',
				controller: "ModalInstanceCtrl",
				controllerAs: '$ctrl',
				resolve: {
					msg: function () {
						return res.data.status == "success" ? "Xóa mẫu thành công" : res.data.error;
					},
					id: function () {
						return "";
					}
				}
			});

			$state.reload();
		}, function (err) {
			var modalInstance = $uibModal.open({
				templateUrl: 'views/modals/dialogs.blade.html',
				controller: "ModalInstanceCtrl",
				controllerAs: '$ctrl',
				resolve: {
					msg: function () {
						return "Xóa mẫu vật không thành công";
					},
					id: function () {
						return "";
					}
				}
			});
		});
	}

	function approvePost(id, val, link) {
		$http({
			method: 'POST',
			url: '/manager/approve',
			headers: {'Content-Type': 'application/json'},
			data: {
				id: id,
				form: link,
				approved: val ? '0' : '1'
			}
		}).then(function (res) {
			// console.log(res);
			if (res.data.status == 'success'){
				var modalInstance = $uibModal.open({
					templateUrl: 'views/modals/dialogs.blade.html',
					controller: "ModalInstanceCtrl",
					controllerAs: '$ctrl',
					resolve: {
						err: function () {
							return "Thành công";
						},
						id: function () {
							return "";
						}
					}
				});
			}
			else {
				var modalInstance = $uibModal.open({
					templateUrl: 'views/modals/dialogs.blade.html',
					controller: "ModalInstanceCtrl",
					controllerAs: '$ctrl',
					resolve: {
						msg: function () {
							return "Bạn không được phê duyệt mẫu vật này.";
						},
						id: function () {
							return "";
						}
					}
				});
			}
			$state.reload();
		}, function (err) {
			var modalInstance = $uibModal.open({
				templateUrl: 'views/modals/dialogs.blade.html',
				controller: "ModalInstanceCtrl",
				controllerAs: '$ctrl',
				resolve: {
					msg: function () {
						return "Bạn không được phê duyệt mẫu vật này.";
					},
					id: function () {
						return "";
					}
				}
			});
			$state.reload();
		});
	}

	function autoCom(str, _scope) {
		var dtl = document.createElement('datalist')
		dtl.setAttribute('id', 'datalist-' + str);
		try {
			_scope.auto[str].forEach(function(val) {
				if (!val){
					return;
				}
				var opt = document.createElement('option');
				opt.innerHTML = val;
				try {
					dtl.appendChild(opt);
				}
				catch (e){
					// console.log(e)
				}
			})
			try {
				var input = document.getElementsByName(str)[0];
				$(dtl).appendTo($(input).parent())
				input.setAttribute('list', 'datalist-' + str);
			}
			catch (e){
				// console.log(e);
			}
		}
		catch (err){
			// console.log(err);
		}
	};

	function renderFlexdatalist(value) {
		setTimeout(function () {
			$('.flexdatalist').flexdatalist({
				minLength: 0,
				valuesSeparator: STR_AUTOCOMPLETION_SEPARATOR
			});
			
			$('.flexdatalist-force').flexdatalist({
				minLength: 0,
				selectionRequired: true,
				valueProperty: value,
				valuesSeparator: STR_AUTOCOMPLETION_SEPARATOR
			});
		}, 1000)
	}

	function fetchFlexdatalist(_scope) {
		setTimeout(function () {
			// Render
			$('.flexdatalist').flexdatalist({
				valuesSeparator: STR_AUTOCOMPLETION_SEPARATOR
			});

			// Must call another time. Do not know why.
			$('.flexdatalist').flexdatalist({
				valuesSeparator: STR_AUTOCOMPLETION_SEPARATOR
			});

			$('.flexdatalist-force').flexdatalist({
				minLength: 0,
				selectionRequired: true,
				valuesSeparator: STR_AUTOCOMPLETION_SEPARATOR
			});

			// After rendering flexdatalist, giaTriSuDung will be focused.
			// Call this to scroll to top.
			$('html, body').animate({
				scrollTop: $(document.getElementsByTagName('html')[0]).offset().top
			}, 1);
		}, 1000);
	}

	function initDatePicker(_scope) {
		setTimeout(function () {
			const ORIGIN_TIME = new Date('1970/1/1');
			const NULL_TIMES = [ORIGIN_TIME.getTime(), 0];
			if (_scope){
				
				// Edit Form
				$('.datepicker').each(function (index, element) {
					try {
						if (element.nodeName.toUpperCase() == 'INPUT'){
							var name = element.getAttribute('name');
							// console.log(name);
							if (_scope[name]){
								var date = new Date(_scope[name]);
								if (NULL_TIMES.indexOf(date.getTime()) >= 0) {
									return _scope[name] = '';
								}
								var h = date.getHours();
								if (h == 2) {
									_scope[name] = date.getFullYear();
								} else if (h == 1) {
									_scope[name] = (date.getMonth() + 1) + '/' + date.getFullYear();
								} else {
									_scope[name] = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear();
								}
							}
						}
					}
					catch (e){
						console.log(e)
					}

				})
			}
			$( ".datepicker" ).datepicker({
				dateFormat: 'dd/mm/yy',
				changeMonth: 'true',
				changeYear: true,
				showAnim: 'slideDown',
				yearRange: ((new Date()).getFullYear() - 200) + ':' + ((new Date()).getFullYear() + 10)
			});
		}, 1000)
		
	}

	function startSpinner() {
		if (SPINNER){
			SPINNER.stop();
		}
		var opts = {
			  lines: 13 // The number of lines to draw
			, length: 28 // The length of each line
			, width: 14 // The line thickness
			, radius: 42 // The radius of the inner circle
			, scale: 2.25 // Scales overall size of the spinner
			, corners: 1 // Corner roundness (0..1)
			, color: '#000' // #rgb or #rrggbb or array of colors
			, opacity: 0.25 // Opacity of the lines
			, rotate: 0 // The rotation offset
			, direction: 1 // 1: clockwise, -1: counterclockwise
			, speed: 1.8 // Rounds per second
			, trail: 60 // Afterglow percentage
			, fps: 20 // Frames per second when using setTimeout() as a fallback for CSS
			, zIndex: 2e9 // The z-index (defaults to 2000000000)
			, className: 'spinner' // The CSS class to assign to the spinner
			, top: '95%' // Top position relative to parent
			, left: '50%' // Left position relative to parent
			, shadow: false // Whether to render a shadow
			, hwaccel: false // Whether to use hardware acceleration
			, position: 'absolute' // Element positioning
		}
		// var target = document.getElementById('form-content');
		target = document.getElementById('form-content');
		// console.log('starting spinner');
		// console.log(target)
		SPINNER = new Spinner(opts).spin(target);
		// console.log('start spinning');
		$('html, body').animate({
			scrollTop: $(document.getElementsByClassName('spinner')[0]).offset().top
		}, 500);

		setTimeout(function () {
			// stopSpinner();
		}, 2000)
	}

	function stopSpinner() {
		SPINNER.stop();
	}

	function ob(x) {
		return document.getElementById(x)
	}

	function createLiTags(data, ulTag, files, urlDelete) {
	// 	console.log("Link api delete");
	// 	console.log(urlDelete);
		for (var i = 0; i < files.length; i++) {
			var li = document.createElement('li');
			li.setAttribute('class', 'list-group-item');
			li.setAttribute('style', 'overflow: auto;')
			var txtFile = (files[i].length > 20) ? (files[i].substring(0, 20) + '... .' + files[i].split('.')[files[i].split('.').length - 1]) : files[i];
			var txtNode = document.createTextNode(txtFile);

			// Tao cac the hien thi danh sach cac file
			var spanParent = document.createElement('span');
			spanParent.setAttribute('class', 'pull-right')

			var div = document.createElement('div')
			div.setAttribute('id', 'progressbar')
			spanParent.append(div)

			var spanChild = document.createElement('span');
			spanChild.setAttribute('data-file-name', files[i]);
			spanChild.setAttribute('data-field-name', data.field);
			spanChild.setAttribute('data-random-str', data.randomStr);
			spanChild.setAttribute('data-form-val', data.form);
			spanChild.setAttribute('data-form-id', data.id);
			spanChild.setAttribute('class', 'glyphicon glyphicon-remove')
			spanChild.setAttribute('style', 'cursor: pointer;')
			// Bat su kien xoa file trong bo nho tam
			spanChild.addEventListener('click', function(event){
				// console.log(event.target.getAttribute('data-file-name') + ' is about to be deleted');
				deleteTmpFile({
					fileName: event.target.getAttribute('data-file-name'),
					field: event.target.getAttribute('data-field-name'),
					randomStr: event.target.getAttribute('data-random-str'),
					form: event.target.getAttribute('data-form-val'),
					id: event.target.getAttribute('data-form-id')
				}, urlDelete)
			});
			spanParent.appendChild(spanChild);
			li.appendChild(txtNode);
			li.appendChild(spanParent);
			ulTag.appendChild(li)
		}
	}

	// Tao the ul
	function createTags(res) {
		var ulTag = ob('ul_' + res.field);
		console.log(ulTag);
		if (ulTag == null) {
			var parentFile = document.getElementsByName(res.field)[0].parentElement
			var ulTag = document.createElement("ul")
			ulTag.setAttribute("id", "ul_" + res.field)
			ulTag.setAttribute("class", "list-group")
			parentFile.appendChild(ulTag);
		} else{
			console.log("reset data in ulTag");
			ulTag.innerText = '';
			console.log("reset data in ulTag");
		}
		var data = {
			field : res.field,
			randomStr: res.randomStr,
			form: res.form,
			id: res.id
		}
		var urlDeleteTmp = "/content/instant-upload"
		createLiTags(data, ulTag, res.files, urlDeleteTmp)
		var urlDeleteSaved = "/content/" + res.form + "/file"
		createLiTags(data, ulTag, res.savedFiles, urlDeleteSaved)
	}

});

var STR_AUTOCOMPLETION_SEPARATOR = '_-_' // Phải đồng bộ với biến cùng tên trong file init.js
var SPINNER = null;
