app.factory('AuthService', function($q, $http, $state, cfpLoadingBar, $uibModal){
	return ({
		//hostName: 'http://localhost:8000',
		hostName: 'http://baotangvn.online',
		deleteP: deleteP,
		approvePost: approvePost,
		addSample: addSample,
		editForm: editForm,
		exportFile: exportFile,
		autoCom: autoCom,
		renderFlexdatalist: renderFlexdatalist,
		fetchFlexdatalist: fetchFlexdatalist,
		initDatePicker: initDatePicker,
		startSpinner: startSpinner,
		stopSpinner: stopSpinner,
		todoRef: todoRef,
		getRestrict: getRestrict,
		arrAuto: [	
			'tenDongNghia',
			'tenTheoBaoTang',
			'tenVietNam',
			'tenPhoThong',
			'tenDiaPhuong',
			'tenTiengAnh',
			'gioi',
			'nganh', 'lop', 
			'phanLop', 
			'bo', 
			'phanBo', 
			'lienHo',
			'ho',
			'phanHo',
			'toc',
			'loai', 
			'duoiLoai', 
			'coQuanThuMau', 'thon',
			'coQuanToChucGiamDinh',
			'coQuanXuLy',
			'boPhanLayMauDNA', 
			'trangThaiGiuMauDNA',
			'coQuanNhapVatMau',
			'giaTriSuDung',
			'tong',
			'chiGiong',
			'phanChiPhanGiong',
			'loai',
			'noiLuuTruMau',
			'viTriLayMauDNA',
			'mauDNA'
		]
	});

	function todoRef() {
		return true;
	}

	function getRestrict(sample) {
		var self = this;
		var defer = $q.defer();
		$http.get(this.hostName + "/users/me?datatype=json")
		.success(function(data, status){
			if (status == 200 && data.status == 'success') {
				defer.resolve(data);
			} else{
				defer.reject();
			}
		})
		//handle error
		.error(function(err){
			console.log(err);
			defer.reject("Lỗi trong quá trình tải dữ liệu...");
		});
		return defer.promise;
	}

	function exportFile(id){
		var arr = document.getElementsByClassName("check-box");

		var urls = [];
		var totalFile = 0;
		var step = 0;
		var progressBar = document.getElementById('download-progress-bar');
		var progressBarContainer = document.getElementById('download-progress-bar-container');
		angular.forEach(arr, function (value) {
			if (value.checked) {
				urls.push(value.getAttribute("data-id") + id);
				totalFile++;
			}
		});

		if (totalFile){
			// step = 100 / totalFile;
			progressBar.setAttribute('aria-valuemax', totalFile);
			progressBar.style.width = '0%';
			progressBar.innerHTML = '0 / ' + totalFile;
			progressBar.setAttribute('aria-valuenow', 0);
			$(progressBarContainer).fadeIn();
		} else{
			$uibModal.open({
				templateUrl: 'views/modals/dialogs.blade.html',
				controller: function ($scope) {
					$scope.message = "Xin hãy chọn file.";
					$scope.ok = function () {
						// $uibModalInstance.close();
					}
				}
			});
		}
		download(0);

		function download(index) {
			// console.log('processing ' + index);
			if (index >= totalFile){
				$(progressBarContainer).fadeOut(1000);
			}
			else {
				var xhr = new XMLHttpRequest();
				xhr.onreadystatechange = function () {
					if ((xhr.readyState == 4) && (xhr.status == 200)){
						// console.log(xhr);
						var disposition = xhr.getResponseHeader('Content-Disposition');
						var fields = disposition.split([';']);
						var fileNameIndex = -1;
						fields.map(function (element, index) {
							fields[index] = element.trim();
							if (fields[index].indexOf('filename*') >= 0){
								fileNameIndex = index;
							}
						})
						var fileName = '';
						if (fileNameIndex == -1){
							for(var i = 0; i < fields.length; i++){
								if (fields[i].indexOf('filename=') >= 0){
									fileNameIndex = i;
								}
							}
						}
						if (fileNameIndex == -1){
							fileName = 'PCSDL.' + id;
						}
						else {
							fileName = fields[fileNameIndex].substring(fields[fileNameIndex].indexOf('PCSDL'));
							fileName = decodeURIComponent(fileName);
						}
						// console.log(fields);
						var type = xhr.getResponseHeader('Content-Type');
						// console.log(type);
						// var blob = new Blob([xhr.response], {type: 'application/x-binary; charset=utf-8'});
						var blob = new Blob([xhr.response], {type: type});
						saveAs(blob, fileName);
						arr[index].checked = false;
						progressBar.style.width = (index + 1) / totalFile * 100 + '%';
						progressBar.innerHTML = (index + 1) + ' / ' + totalFile;
						progressBar.setAttribute('aria-valuenow', index);
						if (index >= totalFile - 1){
							setTimeout(function () {
								$(progressBarContainer).fadeOut(1000);
							}, 500)

						}
						setTimeout(function () {
							download(index + 1);
						}, 100);
					}
				}
				xhr.responseType = 'arraybuffer';
				xhr.open('GET', urls[index], true);
				xhr.send();
			}
		}
	}

	function addSample(fd, url, urlRe){
		$.ajax({
			url: url,
			method: 'POST',
			contentType: false,
			processData: false,
			data: fd,
			success: function (data) {
				cfpLoadingBar.complete();
				stopSpinner();
				setTimeout(function () {
					$uibModal.open({
						templateUrl: 'views/modals/dialogs.blade.html',
						controller: function ($scope) {
							$scope.message = "Thêm mẫu vật thành công";
							$scope.ok = function () {
								 // $scope.showModal = false;
							}
						}
					});
					$state.go(urlRe);
				}, 100)
			},
			error: function (err) {
				cfpLoadingBar.complete();
				stopSpinner();
				cfpLoadingBar.set(0);
				setTimeout(function () { // Stop spinner before alerting
					var _tmp = JSON.parse(err.responseText).error;
					$uibModal.open({
						templateUrl: 'views/modals/dialogs.blade.html',
						controller: function ($scope) {
							$scope.message = "Lỗi, xin hãy nhập lại";
							$scope.ok = function () {
								$uibModalInstance.close();
							}
						}
					});
				}, 100)
				console.log(err);

				var element = document.getElementsByName(JSON.parse(err.responseText).field)[0];
				try {
					element.style.background = '#EE543A';
					setTimeout((function (e) {
						return function () {
							e.style.background = 'white';
						}
					})(element), 2000);
					$('html, body').animate({
						scrollTop: $(element).offset().top - 100
					}, 500);
				}
				catch (e){
					// do not care
				}
			}
		});
	}

	function editForm(fd, url, urlRe){
		$.ajax({
			url: url,
			method: 'PUT',
			contentType: false,
			processData: false,
			data: fd,
			success: function (data) {
				cfpLoadingBar.complete();
				stopSpinner();
				setTimeout(function () { // Stop spinner before alerting
					$uibModal.open({
						templateUrl: 'views/modals/dialogs.blade.html',
						controller: function ($scope) {
							$scope.message = "Chỉnh sửa mẫu vật thành công";
							$scope.ok = function () {
								 $scope.showModal = false;
							}
						}
					});
					$state.go(urlRe)
				}, 100)
			},
			error: function (err) {
				cfpLoadingBar.complete();
				cfpLoadingBar.set(0);
				stopSpinner();
				console.log(err);
				setTimeout(function () { // Stop spinner before alerting
					// alert(JSON.parse(err.responseText).error);
					$uibModal.open({
						templateUrl: 'views/modals/dialogs.blade.html',
						controller: function ($scope) {
							$scope.message = "Đã xảy ra lỗi";
							$scope.ok = function () {
								 $scope.showModal = false;
							}
						}
					});
				}, 100)
				var element = document.getElementsByName(JSON.parse(err.responseText).field)[0];
				try {
					element.style.background = '#EE543A';
					setTimeout((function (e) {
						return function () {
							e.style.background = 'white';
						}
					})(element), 2000);
					$('html, body').animate({
						scrollTop: $(element).offset().top - 100
					}, 500);
				}
				catch (e){
					// do not care
				}
			}
		});
	}
	function deleteP(id, urlDelete){
		$http({
			method: 'DELETE',
			url: urlDelete,
			headers: {'Content-Type': 'application/json'},
			data: {id: id}
		}).then(function (res) {
			$state.reload();
		}, function (err) {
			console.log(err);
		});
	}

	function approvePost(id, val, link) {
		$http({
			method: 'POST',
			url: '/manager/approve',
			headers: {'Content-Type': 'application/json'},
			data: {
				id: id,
				form: link,
				approved: val ? '0' : '1'
			}
		}).then(function (res) {
			// console.log(res);
			if (res.data.status == 'success'){
				$uibModal.open({
					templateUrl: 'views/modals/dialogs.blade.html',
					controller: function ($scope) {
						$scope.message = "Thành công";
					}
				});
			}
			else {
				$uibModal.open({
					templateUrl: 'views/modals/dialogs.blade.html',
					controller: function ($scope) {
						$scope.message = "Bạn không được phê duyệt mẫu vật này.";
					}
				});
			}
			$state.reload();
		}, function (err) {
			// console.log(err);
			$uibModal.open({
				templateUrl: 'views/modals/dialogs.blade.html',
				controller: function ($scope) {
					$scope.message = "Bạn không được phê duyệt mẫu vật này.";
				}
			});
			$state.reload();
		});
	}

	function autoCom(str, _scope) {
		// jQuery("#"+str).autocomplete({
		// 	source : $scope.auto[str]
		// })
		
		
		// console.log('autoCom ' + str);
		var dtl = document.createElement('datalist')
		dtl.setAttribute('id', 'datalist-' + str);
		// console.log(_scope.auto[str])
		try {
			_scope.auto[str].forEach(function(val) {
				// console.log(val);
				if (!val){
					return;
				}
				var opt = document.createElement('option');
				opt.innerHTML = val;
				try {
					dtl.appendChild(opt);
				}
				catch (e){
					console.log(e)
				}
			})
			try {
				var input = document.getElementsByName(str)[0];
				// console.log('input');
				// console.log(input)
				$(dtl).appendTo($(input).parent())
				input.setAttribute('list', 'datalist-' + str);
			}
			catch (e){
				// console.log(e);
				console.log(str);
			}
		}
		catch (err){
			// console.log(err);
		}
	};

	function renderFlexdatalist() {
		setTimeout(function () {
			$('.flexdatalist').flexdatalist({
				minLength: 0,
				valuesSeparator: STR_AUTOCOMPLETION_SEPERATOR
			});
			
			$('.flexdatalist-force').flexdatalist({
				minLength: 0,
				selectionRequired: true,
				valuesSeparator: STR_AUTOCOMPLETION_SEPERATOR
			});
		}, 1000)
	}

	function fetchFlexdatalist(_scope) {
		setTimeout(function () {
			// console.log('render1')
			// Render
			$('.flexdatalist').flexdatalist({
				valuesSeparator: STR_AUTOCOMPLETION_SEPERATOR
			});



			// Must call another time. Do not know why.
			$('.flexdatalist').flexdatalist({
				valuesSeparator: STR_AUTOCOMPLETION_SEPERATOR
			});
			// console.log('done render');

			$('.flexdatalist-force').flexdatalist({
				minLength: 0,
				selectionRequired: true,
				valuesSeparator: STR_AUTOCOMPLETION_SEPERATOR
			});

			// After rendering flexdatalist, giaTriSuDung will be focused.
			// Call this to scroll to top.
			$('html, body').animate({
				scrollTop: $(document.getElementsByTagName('html')[0]).offset().top
			}, 1);
		}, 10);
	}

	function initDatePicker(_scope) {
		setTimeout(function () {
			if (_scope){
				
				// Edit Form
				$('.datepicker').each(function (index, element) {
					try {
						if (element.nodeName.toUpperCase() == 'INPUT'){
							var name = element.getAttribute('name');
							// console.log(name);
							if (_scope[name]){
								var date = new Date(_scope[name]);
								_scope[name] = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear();
							}
						}
					}
					catch (e){
						console.log(e)
					}

				})
			}
			

			$( ".datepicker" ).datepicker({
				dateFormat: 'dd/mm/yy',
				changeMonth: 'true',
				changeYear: true,
				showAnim: 'slideDown',
				yearRange: ((new Date()).getFullYear() - 200) + ':' + ((new Date()).getFullYear() + 10)
			});
		}, 1000)
		
	}

	function startSpinner() {
		if (SPINNER){
			SPINNER.stop();
		}
		var opts = {
			  lines: 13 // The number of lines to draw
			, length: 28 // The length of each line
			, width: 14 // The line thickness
			, radius: 42 // The radius of the inner circle
			, scale: 2.25 // Scales overall size of the spinner
			, corners: 1 // Corner roundness (0..1)
			, color: '#000' // #rgb or #rrggbb or array of colors
			, opacity: 0.25 // Opacity of the lines
			, rotate: 0 // The rotation offset
			, direction: 1 // 1: clockwise, -1: counterclockwise
			, speed: 1.8 // Rounds per second
			, trail: 60 // Afterglow percentage
			, fps: 20 // Frames per second when using setTimeout() as a fallback for CSS
			, zIndex: 2e9 // The z-index (defaults to 2000000000)
			, className: 'spinner' // The CSS class to assign to the spinner
			, top: '95%' // Top position relative to parent
			, left: '50%' // Left position relative to parent
			, shadow: false // Whether to render a shadow
			, hwaccel: false // Whether to use hardware acceleration
			, position: 'absolute' // Element positioning
		}
		// var target = document.getElementById('form-content');
		target = document.getElementById('form-content');
		// console.log('starting spinner');
		// console.log(target)
		SPINNER = new Spinner(opts).spin(target);
		// console.log('start spinning');
		$('html, body').animate({
			scrollTop: $(document.getElementsByClassName('spinner')[0]).offset().top
		}, 500);

		setTimeout(function () {
			// stopSpinner();
		}, 2000)
	}

	function stopSpinner() {
		SPINNER.stop();
	}

});

var STR_AUTOCOMPLETION_SEPERATOR = '_-_' // Phải đồng bộ với biến cùng tên trong file init.js
var SPINNER = null;

//Autocomplete
// app.directive('autoComplete', function($timeout) {
//     return function(scope, iElement, iAttrs) {
//         iElement.autocomplete({
//             source: scope[iAttrs.uiItems],
//             select: function() {
//                 $timeout(function() {
//                   iElement.trigger('input');
//                 }, 0);
//             }
//         });
//     };
// });