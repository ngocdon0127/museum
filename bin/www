#!/usr/bin/env node

/**
 * Module dependencies.
 */

(function() {
    var childProcess = require("child_process");
    var oldSpawn = childProcess.spawn;
    function mySpawn() {
        console.log('spawn called');
        console.log(arguments);
        var result = oldSpawn.apply(this, arguments);
        return result;
    }
    childProcess.spawn = mySpawn;
})();

var app = require('../app');
var debug = require('debug')('museum:server');
var http = require('http');
var https = require('https');
var crypto = require('crypto');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || require('../config/config').app.port);
var nonSecurePort = normalizePort(require('../config/config').app.nonSecurePort);
app.set('port', port);



// var server = http.createServer(app);
var server = null;
var app80 = null;

if (require('../config/config.js').app.mode === 'https'){
  /**
   * Create HTTPS server.
   */
  var options = {
    key: fs.readFileSync(require('../config/config.js').ssl.privateKey),
    cert: fs.readFileSync(require('../config/config.js').ssl.certificate)
  };
  server = https.createServer(options, app);
  
  /**
   * Create HTTP server. Redirect all requests to HTTPS server
   */
  var express = require('express');
  app80 = express();
  app80.use((req, res, next) => {
    res.redirect('https://' + require('../config/config.js').app.domain + req.url);
  })

  http.createServer(app80).listen(nonSecurePort);
}
else {
  /**
   * Create HTTP server.
   */
  server = http.createServer(app);
}



// var privateKey = fs.readFileSync(require('../config/config.js').ssl.privateKey).toString();
// var certificate = fs.readFileSync(require('../config/config.js').ssl.certificate).toString();
// server.setSecure(crypto.createCredentials({key: privateKey, cert: certificate}));


/**
 * Listen on provided port, on all network interfaces.
 */

if (require('../config/config.js').app.mode === 'https'){
  server.listen(port);
}
else {
  server.listen(nonSecurePort);
}
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Worker ' + process.pid + ':\tListening on ' + bind);
  console.log('Worker ' + process.pid + ':\tListening on ' + bind);
}